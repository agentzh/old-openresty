SETUP TEST ENVIRONMENT:

This is a basic guideline for settting up an OpenAPI server on your own machine. Someone has succeeded in setting up one on Windows XP using ActivePerl 5.8.8. The normal development environment is Linux though. If you have any particular question, feel free to ask us by sending mails to agentzh@yahoo.cn :)

1. grab the openapi package and unpack it in some place, let's say it's openapi;

2. enter the openapi directory, run "perl Makefile.PL" to check missing dependencies:

    $ cd openapi
    $ perl Makefile.PL
    $ sudo make -f Makefile  # This will install missing dependencies

To run "make test" or "make debug", you need to have lighttpd and PostgreSQL database installed.

for PostgreSQL database, you need to prepare a PostgreSQL account (i.e., 'agentzh); and you need to create an empty database (i.e. test), and you need to create a store precedure language plpgsql for that database, contact your PostgreSQL DBA for it or read PostgreSQL manuel.

Basically, they are command like:

    $ createdb test
    $ createuser -P agnetzh
    $ createlang plpgsql test

3. Edit your etc/site_openapi.conf file, change the configure settings
under [backend] section according to your previous settings. The default settings look like this:

    [backend]
    type=Pg
    host=localhost
    user=agentzh
    password=agentzh
    database=test

Most of the time, you need to change the last 3 lines unless you're using exactly the same user, password, and database name.

4. Give read/write access to lighttpd's log file (optional):

    $ chmod 777 /var/log/lighttpd/error.log
    $ chmod 777 /var/log/lighttpd

5. For the Pg backend, one need to create the "anonymous" role in your database (like "test"):

    $ createuser anonymouse test

6. Create a "tester" user account for our test suite in OpenAPI (drop it if it already exists):

    $ bin/openapi.pl deluser tester
    $ bin/openapi.pl adduser tester

Give a password (say, blahblahblah) to its Admin role. Update your etc/site_openapi.conf to reflect your these settings:

    [test_suite]
    use_http=0
    server=tester:blahblahblah@localhost

Now you can already run the test suite without a lighttpd server:

    $ prove -Ilib -Iinc -r t

7. Sample lighttpd configuration:

    # lighttpd.conf

    server.modules              = (
                "mod_fastcgi",
                ...
    )

    fastcgi.server = (
        "/=" => (
            "openapi" => (
                "socket"       => "/tmp/openapi.socket",
                "check-local"  => "disable",
                "bin-path"     => "/PATH/TO/YOUR/bin/openapi.pl",
                "bin-environment" => (
                    "OPENAPI_URL_PREFIX" => "",
                    "OPENAPI_COMMAND" => "fastcgi",
                ),
                "min-procs"    => 1,
                "max-procs"    => 5,
                "max-load-per-proc" => 1,
                "idle-timeout" => 20,
            )
        )
    )

And also make sure the following line is commented out:

    # url.access-deny            = ( "~", ".inc" )

HOW TO TEST ONE SPECIFIC TEST SUITE FILE

It's also possible to debug a simple .t file, for instance,

    make t/01-sanity.t

Or use prove to test a remote OpenAPI server, for example:

    OPENAPI_FRONTEND=10.62.136.86 prove t/0*.t

where 10.62.136.86 is the IP (or hostname or URL) of your OpenAPI server
being tested.

To test the Pg cluster rather than the desktop Pg, change your etc/site_openapi.conf:

    [backend]
    type=PgFarm

and also set other items in the same group if necessary.

FOR DEVELOPER:

bin/ directory is the where CGI entry openapi.pl located
doc/ directory containing OpenAPI spec
lib/OpenAPI/ directory contain all the code needed to run OpenAPI
lib/OpenAPI/OpenAPI.pm contain the code stub for OpenAPI protocol
lib/OpenAPI/Limits.pm are those hard limits located, we limit the number of different objects (model, row, view etc.) a user could create by default
lib/OpenAPI/Backend contain all the code to initialize OpenAPI meta tables and code to access different database, for now we support Postgres stand alone database and 
PostgreSQL cluster
lib/OpenAPI/Backend/Pg.pm OpenAPI PostgreSQL stand alone database access code
lib/OpenAPI/Backend/PgFarm.pm OpenAPI PostgreSQL cluster database access code
lib/OpenAPI/Handler contain all handler methods OpenAPI supported, these methods are moved from lib/OpenAPI.pm due to code refactor; 
                    method name looks like HTTP_METHOD_some_sub_name.
lib/SQL classes/methods to generate SQL query (in string form), use OO to encapsulate SQL query generation
lib/SQL/Statement.pm base class
lib/SQL/Select.pm class and methods to generate SELECT statement
lib/SQL/Insert.pm class and methods to generate INSERT statement
lib/SQL/Update.pm class and methods to generate UPDATE statement
lib/MiniSQL/ directory conatining our mini-sql parser code, now only SELECT support
t/ directory containing OpenAPI test suite, use `make test' to run the test, read above on how to setup test environment


