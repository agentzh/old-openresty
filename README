First of all, please run "perl Makefile.PL" to check missing dependencies:

    $ perl Makefile.PL
    $ sudo make -f Makefile  # This will install missing dependencies

To run "make test" or "make debug", you need to have lighttpd and postgres installed.
Also you need to create an empty database named "test" and also make user
'agentzh' a Pg login account (with the password 'agentzh').

Also give read/write access to lighttpd's log file:

    $ chmod 777 /var/log/lighttpd/error.log
    $ chmod 777 /var/log/lighttpd

For the Pg backend, one need to create the "anonymous" role in the "test"
database.

Also, we need to create a "peee" user account for our test suite in OpenAPI:

    $ bin/openapi adduser peee

Give the password 4423037 to its Admin role.

Sample lighttpd configuration:

# lighttpd.conf

server.modules              = (
            "mod_fastcgi",
            ...
  )

fastcgi.server = (
    "/=" => (
        "openapi" => (
            "socket"       => "/tmp/openapi.socket",
            "check-local"  => "disable",
            "bin-path"     => "/PATH/TO/YOUR/bin/openapi.pl",
            "bin-environment" => (
                "OPENAPI_BACKEND" => "Pg",
                "OPENAPI_URL_PREFIX" => "",
                "OPENAPI_COMMAND" => "fastcgi"
            ),
            "min-procs"    => 1,
            "max-procs"    => 5,
            "max-load-per-proc" => 1,
            "idle-timeout" => 20,
        )
    )
)

# Also make sure the following line is commented out:
# url.access-deny            = ( "~", ".inc" )

# END

It's also possible to debug a simple .t file, for instance,

    make t/01-sanity.t

Or use prove to test a remote OpenAPI server, for example:

    OPENAPI_FRONTEND=10.62.136.86 prove t/0*.t

where 10.62.136.86 is the IP (or hostname or URL) of your OpenAPI server
being tested.

To test the Pg cluster rather than the desktop Pg, replace the following line in your lighttpd.conf

        "bin-environment" => ( "OPENAPI_BACKEND" => "Pg", "OPENAPI_URL_PREFIX" => "" ),

with

        "bin-environment" => ( "OPENAPI_BACKEND" => "PgFarm", "OPENAPI_URL_PREFIX" => "" ),


For Developer:

bin/ directory is the where CGI entry openapi.pl located
doc/ directory containing OpenAPI spec
lib/OpenAPI/ directory contain all the code needed to run OpenAPI
lib/OpenAPI/OpenAPI.pm contain all the methods to OpenAPI OpenAPI supported, normally it's HTTP_METHOD_some_sub_name
lib/OpenAPI/Limits.pm are those hard limits located, we limit the number of different objects (model, row, view etc.) a user could create by default
lib/OpenAPI/Backend contain all the code to initialize OpenAPI meta tables and code to access different database, for now we support Postgres stand alone database and 
PostgreSQL cluster
lib/OpenAPI/Backend/Pg.pm OpenAPI PostgreSQL stand alone database access code
lib/OpenAPI/Backend/PgFarm.pm OpenAPI PostgreSQL cluster database access code
lib/SQL classes/methods to generate SQL query (in string form), use OO to encapsulate SQL query generation
lib/SQL/Statement.pm base class
lib/SQL/Select.pm class and methods to generate SELECT statement
lib/SQL/Insert.pm class and methods to generate INSERT statement
lib/SQL/Update.pm class and methods to generate UPDATE statement
lib/MiniSQL/ directory conatining our mini-sql parser code, now only SELECT support
t/ directory containing OpenAPI test suite, use `make test' to run the test, read above on how to setup test environment


